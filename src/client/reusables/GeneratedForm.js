import React, { Component } from 'react';
import PropTypes from 'prop-types';
import styled from 'styled-components';

var isNotEmptyValue = (value) => value !== undefined && value !== null &&
  typeof value === 'object' && Object.keys(value).length > 0;

var FormBackground = styled.form`
  background-color: cadetblue;
  width: fit-content;
  margin: auto;
`;

var FormDiv = styled.div`
  padding: 8px;
`;

var FormInput = styled.input`
  border-radius: 8px;
  vertical-align: top;
  height: 16px;
  margin-top: 5px;
  font-family: sans-serif;
`;

var FormHeader = styled.h2`
  text-align: center;
  font-family: sans-serif;
`;

var FormLabel = styled.label`
  color: white;
  padding-right: 4px;
  font-family: sans-serif;
  text-transform: uppercase;
`;

var FormEnumInput = styled.select`

`;

var FormObjectInputLabel = styled.p`
  color: white;
  padding-right: 4px;
  font-family: sans-serif;
  text-transform: uppercase;
  margin: 8px;
`;

var FormSubmit = styled.input`
  font-family: sans-serif;
  text-transform: uppercase;
  margin: 8px;
  border-radius: 8px;
  font-size: 14px;
`;

var FormErrorMessage = styled.p`
  font-family: sans-serif;
  text-transform: uppercase;
`;

class GeneratedForm extends Component {
  static propTypes = {
    title: PropTypes.string.isRequired,
    params: PropTypes.objectOf(PropTypes.shape({
      label: PropTypes.string.isRequired,
      type: PropTypes.oneOfType(
        [PropTypes.string, PropTypes.func]).isRequired,
      shape: PropTypes.oneOfType(
        [PropTypes.object, PropTypes.func]),
      value: PropTypes.oneOfType([PropTypes.string, PropTypes.object,
        PropTypes.array]),
      enumList: PropTypes.oneOfType([PropTypes.arrayOf(PropTypes.shape({
        value: PropTypes.string,
        text: PropTypes.string
      })), PropTypes.func]),
      maximum: PropTypes.number,
      minimum: PropTypes.number
    })).isRequired,
    method: PropTypes.string.isRequired,
    formAction: PropTypes.string.isRequired,
    parentCallback: PropTypes.func
  }

  static defaultProps = {
    parentCallback: undefined
  }

  constructor(props) {
    super(props);
    var values = {};
    for (var n in this.props.params) {
      values[n] = this.props.params[n].value;
    }
    this.state = {
      values: values
    }

    this.handleChange = this.handleChange.bind(this);
    this.handleArrayRemove = this.handleArrayRemove.bind(this);
    this.handleArrayAdd = this.handleArrayAdd.bind(this);
    this.autoGeneratedInput = this.autoGeneratedInput.bind(this);
  }

  handleChange(param) {
    var self = this;
    return function(event) {
      event.preventDefault();
      var newState = {
          values: self.state.values
        }, match = '', varname = '', index = '', key = '';
      if (param.match(/^(.+)\.(\d+)\.(.+)$/)) {
        match = param.match(/^(.+)\.(\d+)\.(.+)$/);
        varname = match[1];
        index = parseInt(match[2]);
        key = match[3];
        newState.values[varname][index] =
          isNotEmptyValue(newState.values[varname][index]) ?
            newState.values[varname][index] : {};
        newState.values[varname][index][key] = event.target.value;
      }
      else if (param.match(/^([^[]]+)\.(.+)$/)) {
        match = param.match(/^(.+)\.(.+)$/);
        varname = match[1];
        key = match[2];
        newState.values[varname] =
          isNotEmptyValue(newState.values[varname]) ?
            newState.values[varname] : {};
        newState.values[varname][key] = event.target.value;
      }
      else if (param.match(/^(.+)\[(\d)\]$/)) {
        match = param.match(/\[(\d)\]/);
        varname = match[1];
        index = parseInt(match[2]);
        newState.values[varname] = isNotEmptyValue(newState.values[varname]) ?
          newState.values[varname] : [];
        newState.values[varname][index] = event.target.value;
      }
      else { newState.values[param] = event.target.value; }
      self.setState(newState);
      if (self.props.parentCallback !== undefined)
        self.props.parentCallback(newState.values);
    }
  }

  handleArrayRemove(param, n) {
    var self = this;
    return function(event) {
      event.preventDefault();
      var newState = {
        values: self.state.values
      };
      newState.values[param].splice(n, 1);
      self.setState(newState);
    }
  }

  handleArrayAdd(param) {
    var self = this;
    return function(event) {
      event.preventDefault();
      var newState = {
          values: self.state.values
        }, toAdd = {};
      if (self.props.params[param].type === '[object]') {
        for (var key in self.props.params[param].shape) {
          toAdd[key] = '';
        }
      }
      else toAdd = '';
      newState.values[param].push(toAdd);
      self.setState(newState);
    }
  }

  autoGeneratedInput(param) {
    var params = this.props.params, values = this.state.values,
      handleChange = this.handleChange, paramSplit =
      param.split('.'), paramObj = {}, valueObj = '', overallObj = '';

    if (paramSplit.length === 3) {
      paramObj = params[paramSplit[0]].shape[paramSplit[2]];
      valueObj = values[paramSplit[0]][paramSplit[1]][paramSplit[2]];
      overallObj = values[paramSplit[0]][paramSplit[1]];
    }
    else if (paramSplit.length === 2) {
      paramObj = params[paramSplit[0]].shape[paramSplit[1]];
      valueObj = values[paramSplit[0]][paramSplit[1]];
      overallObj = values[paramSplit[0]][paramSplit[1]];
    }
    else if (paramSplit.length === 1) {
      paramObj = params[paramSplit[0]];
      valueObj = values[paramSplit[0]];
      overallObj = values[paramSplit[0]];
    }

    console.log(valueObj);

    var paramType = paramObj.type;

    if (typeof paramType === 'string') {
      if (paramType === 'enum') {
        return [
          <FormLabel htmlFor={param}>
            {paramObj.label}</FormLabel>,
          <br />,
          <FormEnumInput id={param} name={param}
            value={valueObj} onChange={(e) => {
              handleChange(param)(e);
            }}>
            {paramObj.enumList.map(
              (node) => {
                console.log(node);
                return <option value={node.value}>
                  {node.text}</option>;
              }
            )}
          </FormEnumInput>
        ]
      }
      else {
        var comp;

        if (paramType === 'number' || paramType === 'date') {
          if (paramObj.maximum && paramObj.maximum !== '' &&
            paramObj.minimum && paramObj.minimum !== '') {
            comp = <FormInput id={param} name={param}
              type={paramObj.type} value={valueObj} max={paramType.maximum}
              min={paramType.minimum}
              onChange={(e) => { handleChange(param)(e); } }/>;
          }

          else if (paramObj.maximum && paramObj.maximum !== '') {
            comp = <FormInput id={param} name={param}
              type={paramObj.type} value={valueObj} max={paramType.maximum}
              onChange={(e) => { handleChange(param)(e); } }/>;
          }

          else if (paramObj.minimum && paramObj.minimum !== '') {
            comp = <FormInput id={param} name={param}
              type={paramObj.type} value={valueObj}
              min={paramType.minimum}
              onChange={(e) => { handleChange(param)(e); } }/>;
          }
        }
        else if (paramObj.maximum && paramObj.maximum !== '') {
          console.log(paramObj);
          comp = <FormInput id={param} name={param}
            type={paramType} value={valueObj}
            maxLength={paramObj.maximum.toString()}
            onChange={(e) => { handleChange(param)(e); } }/>;
        }
        else {
          console.log(paramObj);
          comp = <FormInput id={param} name={param}
            type={paramType} value={valueObj}
            onChange={(e) => { handleChange(param)(e); } }/>;
        }

        return [
          <FormLabel htmlFor={param}>
            {paramObj.label}</FormLabel>,
          <br />,
          comp
        ];
      }
    }
    else {
      console.log(valueObj);
      return [<FormLabel htmlFor={param}>
        {paramObj.label}</FormLabel>,
      <br />,
      <FormInput id={param} name={param}
        type={paramType(overallObj)} value={valueObj}
        onChange={(e) => { handleChange(param)(e); } }/>]
    }
  }

  render() {
    var params = this.props.params, values = this.state.values,
      handleArrayRemove = this.handleArrayRemove,
      handleArrayAdd = this.handleArrayAdd,
      autoGeneratedInput = this.autoGeneratedInput;

    return (
      <div>
        <FormHeader>{this.props.title}</FormHeader>
        {window.location.search &&
          window.location.search.startsWith('?error=') ?
          <FormErrorMessage>
            {decodeURIComponent(window.location.search.replace('?error=', ''))}
          </FormErrorMessage> : null}
        <FormBackground action={this.props.formAction}
          method={this.props.method}>
          {Object.keys(params).map((param, i) => {
            return <FormDiv key={param + i.toString()}>
              {
                (!params[param].type.match(/\[.*\]/) ?
                  (params[param].type !== 'object' ?
                    autoGeneratedInput(param) :
                    <div>
                      <FormObjectInputLabel>
                        {params[param].label}
                      </FormObjectInputLabel>
                      <FormDiv>
                        {Object.keys(params[param].shape).map((key) =>
                          autoGeneratedInput(param + '.' + key))}
                      </FormDiv></div>) :
                  (params[param].type !== '[object]' ?
                    [
                      <FormObjectInputLabel>
                        {params[param].label}
                      </FormObjectInputLabel>,
                      <button onClick={handleArrayAdd(param)}>Add</button>,
                      autoGeneratedInput(param + '.0'),
                      <button onClick={(e) =>
                        handleArrayRemove(param, 0)(e)}>{'Remove'}</button>,
                      values[param].length > 1 ?
                        values[param].slice(1).map((node, i) => [
                          autoGeneratedInput(param + '.' + (i + 1).toString()),
                          <button onClick={(e) =>
                            handleArrayRemove(param, i + 1)(e)}>
                            {'Remove'}</button>])
                        : null
                    ] : [
                      <div>
                        <FormObjectInputLabel>{params[param].label}
                        </FormObjectInputLabel>
                        <button onClick={handleArrayAdd(param)}>Add</button>
                        <FormObjectInputLabel>
                          {params[param].label + ' 1'}
                        </FormObjectInputLabel>
                        {Object.keys(params[param].shape).map((key) =>
                          <FormDiv>
                            {autoGeneratedInput(param + '.0.' + key)}
                          </FormDiv>
                        )}
                        <button
                          onClick={(e) => handleArrayRemove(param, 0)(e)}>
                          {'Remove'}</button>
                      </div>,
                      values[param].length > 0 ?
                        (values[param].slice(1).map((node, i) => <div>
                          <FormObjectInputLabel>
                            {params[param].label + ' ' + (i + 2)}
                          </FormObjectInputLabel>
                          {Object.keys(params[param].shape).map((key) =>
                            <FormDiv>
                              {autoGeneratedInput(
                                param + '.' + (i + 1) + '.' + key)}
                            </FormDiv>
                          )}
                          <button
                            onClick={(e) => handleArrayRemove(param, i + 1)(e)}>
                            {'Remove'}</button>
                        </div>)) : null]))}
            </FormDiv>;
          })}
          <FormSubmit type="submit" value="Submit" />
        </FormBackground>
      </div>
    );
  }
}

export default GeneratedForm;
